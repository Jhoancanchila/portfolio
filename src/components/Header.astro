---
import Menu from "@icons/Menu.astro";
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";
import LanguajePicker from './LanguajePicker.astro';

import { getLangFromUrl, getTranslatedText } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);

type Props = HeaderProps;

const { siteLogo, navLinks } = Astro.props;
---

<header
  class="sticky top-0 z-50 mx-auto flex max-w-5xl animate-slide-in items-center justify-between bg-black px-5 py-6"
>
  <a href="/" aria-label="Home link">
    <Image
      class="rounded-full"
      src={siteLogo}
      width="45"
      height="45"
      alt="website logo"
    />
  </a>

  <button
    type="button"
    id="menu-button"
    class="px-1.5 text-neutral sm:hidden"
    aria-expanded="false"
    aria-controls="main-menu"
  >
    <Menu />
  </button>

  <nav
    class="absolute top-20 right-5 hidden w-[calc(100%-2.5rem)] rounded-xl border border-neutral/40 bg-black px-4 py-5 text-neutral sm:static sm:flex sm:w-auto sm:items-center sm:gap-4 sm:border-0 sm:bg-transparent sm:p-0"
    id="main-menu"
  >
    <ul class="gap-2 sm:flex">
      {
        navLinks.map((link) => (
          <li class="relative">
            <a
              class={`nav-item relative block p-2 text-sm font-medium transition-all duration-500 after:absolute after:bottom-0 after:left-2/4 after:h-2 after:w-1 after:-translate-x-2/4 after:text-primary after:opacity-0 after:content-['•'] hover:text-white`}
              href={link.href}
            >
              {getTranslatedText(link.text, lang)}
            </a>
          </li>
        ))
      }
    </ul>
    
    <!-- Separador visual solo en desktop -->
    <div class="hidden sm:block sm:h-5 sm:w-px sm:bg-neutral/30"></div>
    
    <!-- Botones de idioma -->
    <LanguajePicker />
  </nav>
</header>

<script>
  // Función para inicializar el menú móvil y la navegación
  function initializeHeader() {
    const button = document.querySelector("#menu-button");
    const menu = document.querySelector("#main-menu");

    if (!button || !menu) return;

    // Limpiar listeners anteriores si existen
    const oldButton = button.cloneNode(true);
    button.parentNode?.replaceChild(oldButton, button);
    
    const newButton = document.querySelector("#menu-button");
    const newMenu = document.querySelector("#main-menu");
    const newNavItems = document.querySelectorAll("#main-menu > ul > li > a");

    const toggleMenu = () => {
      newMenu?.classList.toggle("hidden");
      const isHidden = newMenu?.classList.contains("hidden");
      newButton?.setAttribute("aria-expanded", `${!isHidden}`);
    };

    // Agregar event listener al botón del menú
    newButton?.addEventListener("click", toggleMenu);
    
    // Agregar event listeners a los items de navegación
    newNavItems.forEach((item) => {
      item?.addEventListener("click", toggleMenu);
    });

    // Update navigation based on scroll position with Intersection Observer
    // Limpiar observer anterior si existe
    const globalWindow = window as any;
    if (globalWindow.headerObserver) {
      globalWindow.headerObserver.disconnect();
    }

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            newNavItems.forEach((item) => {
              if (item.getAttribute("href") === `#${entry.target.id}`) {
                item.classList.add("text-white", "md:after:opacity-100");
              } else {
                item.classList.remove("text-white", "md:after:opacity-100");
              }
            });
          }
        });
      },
      { threshold: 0.5 },
    );

    document.querySelectorAll("section").forEach((section) => {
      observer.observe(section);
    });

    // Guardar el observer para poder limpiarlo después
    globalWindow.headerObserver = observer;

    // Cleanup observer
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        document.querySelectorAll("section").forEach((section) => {
          observer.observe(section);
        });
      }
    };
  }

  // Inicializar en la carga inicial
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeHeader);
  } else {
    initializeHeader();
  }

  // Re-inicializar después de cada transición de página
  document.addEventListener('astro:page-load', initializeHeader);
</script>

<style>
  header {
    animation-timeline: scroll();
    animation-range: 0 650px;
  }
</style>
